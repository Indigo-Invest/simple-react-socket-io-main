[{"c:\\2025\\20250425-simple-react-socket-io\\simple-react-socket-io-main\\react-client\\src\\index.js":"1","c:\\2025\\20250425-simple-react-socket-io\\simple-react-socket-io-main\\react-client\\src\\App.js":"2","c:\\2025\\20250425-simple-react-socket-io\\simple-react-socket-io-main\\react-client\\src\\reportWebVitals.js":"3"},{"size":500,"mtime":1745556880523,"results":"4","hashOfConfig":"5"},{"size":6638,"mtime":1745817826787,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1745556880593,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1ddh3z7",{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"c:\\2025\\20250425-simple-react-socket-io\\simple-react-socket-io-main\\react-client\\src\\index.js",[],["16","17"],"c:\\2025\\20250425-simple-react-socket-io\\simple-react-socket-io-main\\react-client\\src\\App.js",["18"],"//Updated App.js (Message Grouping Version)\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction App() {\n  const socketRef = useRef(null);\n  const messagesEndRef = useRef(null);\n\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [userData, setUserData] = useState({ username: '', avatarStyle: '' });\n  const [typingStatus, setTypingStatus] = useState('');\n\n  const avatarStyles = [\n    'croodles',\n    'croodles-neutral',\n    'avataaars',\n    'bottts',\n    'pixel-art',\n    'fun-emoji',\n    'identicon',\n  ];\n\n  const getRandomStyle = () => {\n    const randomIndex = Math.floor(Math.random() * avatarStyles.length);\n    return avatarStyles[randomIndex];\n  };\n\n  useEffect(() => {\n    const randomName = `User-${Math.floor(Math.random() * 1000)}`;\n    const style = getRandomStyle();\n    setUserData({ username: randomName, avatarStyle: style });\n  }, []);\n\n  useEffect(() => {\n    socketRef.current = io('http://localhost:9013');\n\n    socketRef.current.on('connect', () => {\n      console.log('Connected to server');\n    });\n\n    socketRef.current.on('message', (messageObj) => {\n      setMessages((prevMessages) => [...prevMessages, messageObj]);\n    });\n\n    socketRef.current.on('typing', (typingUser) => {\n      if (typingUser !== userData.username) {\n        setTypingStatus(`${typingUser} is typing...`);\n        setTimeout(() => setTypingStatus(''), 2000);\n      }\n    });\n\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n      }\n    };\n  }, [userData.username]);\n\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages]);\n\n  const handleSendMessage = (e) => {\n    e.preventDefault();\n    if (newMessage.trim() !== '') {\n      const now = new Date();\n      const timestamp = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n\n      const messageObj = {\n        id: uuidv4(),\n        user: userData.username,\n        text: newMessage,\n        avatarStyle: userData.avatarStyle,\n        timestamp: timestamp,\n      };\n      socketRef.current.emit('message', messageObj);\n      setNewMessage('');\n    }\n  };\n\n  const handleTyping = () => {\n    socketRef.current.emit('typing', userData.username);\n  };\n\n  const getAvatarUrl = (user, style) => {\n    return `https://api.dicebear.com/7.x/${style}/svg?seed=${encodeURIComponent(user)}`;\n  };\n\n  return (\n    <div style={styles.container}>\n      <h1 style={styles.header}>ðŸ’¬ Fun Chat App</h1>\n      <div style={{ marginBottom: '0.5rem', color: '#555' }}>\n        You are: <strong>{userData.username}</strong> using <em>{userData.avatarStyle}</em> style!\n      </div>\n\n      \n      <div style={styles.chatBox}>\n        {messages.map((msg, idx) => {\n          const isOwnMessage = msg.user === userData.username;\n          const isSameUserAsPrevious = idx > 0 && messages[idx - 1].user === msg.user;\n\n          return (\n            <div\n              key={idx}\n              style={{\n                ...styles.messageContainer,\n                flexDirection: isOwnMessage ? 'row-reverse' : 'row',\n                marginTop: isSameUserAsPrevious ? '2px' : '10px', // smaller margin for stacked messages\n              }}\n            >\n              {!isSameUserAsPrevious && (\n                <img\n                  src={getAvatarUrl(msg.user, msg.avatarStyle)}\n                  alt=\"avatar\"\n                  style={styles.avatar}\n                />\n              )}\n             <div\n              style={{\n                ...styles.message,\n                backgroundColor: isOwnMessage ? '#dcf8c6' : '#e6f7ff',\n                marginLeft: isSameUserAsPrevious ? (isOwnMessage ? 0 : '48px') : 0,\n                marginRight: isSameUserAsPrevious ? (isOwnMessage ? '48px' : 0) : 0,\n              }}\n            >\n              {!isSameUserAsPrevious && (\n                <div style={styles.username}>{msg.user}</div>\n              )}\n              <div>{msg.text}</div>\n              <div style={styles.timestamp}>{msg.timestamp}</div>\n            </div>\n          </div>\n        );\n      })}\n      <div ref={messagesEndRef} />\n    </div>\n\n\n      {typingStatus && (\n        <div style={styles.typingStatus}>{typingStatus}</div>\n      )}\n\n      <form onSubmit={handleSendMessage} style={styles.form}>\n        <input\n          style={styles.input}\n          type=\"text\"\n          placeholder=\"Type a message...\"\n          value={newMessage}\n          onChange={(e) => {\n            setNewMessage(e.target.value);\n            handleTyping();\n          }}\n        />\n        <button type=\"submit\" style={styles.button}>Send</button>\n      </form>\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100vh',\n    backgroundColor: '#f0f2f5',\n    fontFamily: 'Arial, sans-serif',\n    padding: '1rem',\n  },\n  header: {\n    marginBottom: '0.5rem',\n    color: '#333',\n  },\n  chatBox: {\n    width: '100%',\n    maxWidth: '500px',\n    height: '400px',\n    backgroundColor: '#fff',\n    borderRadius: '8px',\n    padding: '1rem',\n    overflowY: 'scroll',\n    boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)',\n    display: 'flex',\n    flexDirection: 'column',\n    marginBottom: '0.5rem',\n  },\n  messageContainer: {\n    display: 'flex',\n    alignItems: 'flex-start',\n    marginBottom: '0.5rem',\n  },\n  avatar: {\n    width: '40px',\n    height: '40px',\n    margin: '0 0.5rem',\n    borderRadius: '50%',\n    alignSelf: 'flex-start', // Makes stacking look nice\n  },\n  message: {\n    padding: '0.5rem 1rem',\n    borderRadius: '10px',\n    maxWidth: '70%',\n    wordBreak: 'break-word',\n    position: 'relative',\n  },\n  username: {\n    fontSize: '0.75rem',\n    fontWeight: 'bold',\n    color: '#555',\n    marginBottom: '0.25rem',\n  },\n  timestamp: {\n    fontSize: '0.7rem',\n    color: '#999',\n    marginTop: '0.25rem',\n    textAlign: 'right',\n  },\n  typingStatus: {\n    fontSize: '0.9rem',\n    color: '#888',\n    marginBottom: '0.5rem',\n    fontStyle: 'italic',\n  },\n  form: {\n    display: 'flex',\n    width: '100%',\n    maxWidth: '500px',\n  },\n  input: {\n    flex: 1,\n    padding: '0.75rem',\n    borderRadius: '8px 0 0 8px',\n    border: '1px solid #ccc',\n    fontSize: '1rem',\n  },\n  button: {\n    padding: '0.75rem 1.5rem',\n    borderRadius: '0 8px 8px 0',\n    border: 'none',\n    backgroundColor: '#1890ff',\n    color: '#fff',\n    fontSize: '1rem',\n    cursor: 'pointer',\n  }\n};\n\nexport default App;\n","c:\\2025\\20250425-simple-react-socket-io\\simple-react-socket-io-main\\react-client\\src\\reportWebVitals.js",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":35,"column":6,"nodeType":"25","endLine":35,"endColumn":8,"suggestions":"26"},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getRandomStyle'. Either include it or remove the dependency array.","ArrayExpression",["29"],"no-global-assign","no-unsafe-negation",{"desc":"30","fix":"31"},"Update the dependencies array to be: [getRandomStyle]",{"range":"32","text":"33"},[1003,1005],"[getRandomStyle]"]