{"ast":null,"code":"import { transports as DEFAULT_TRANSPORTS } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nimport { createCookieJar, defaultBinaryType, nextTick } from \"./globals.node.js\";\nconst withEventListeners = typeof addEventListener === \"function\" && typeof removeEventListener === \"function\";\nconst OFFLINE_EVENT_LISTENERS = [];\n\nif (withEventListeners) {\n  // within a ServiceWorker, any event handler for the 'offline' event must be added on the initial evaluation of the\n  // script, so we create one single event listener here which will forward the event to the socket instances\n  addEventListener(\"offline\", () => {\n    OFFLINE_EVENT_LISTENERS.forEach(listener => listener());\n  }, false);\n}\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes without upgrade mechanism, which means that it will keep the first low-level transport that\n * successfully establishes the connection.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithoutUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithoutUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithUpgrade\n * @see Socket\n */\n\n\nexport class SocketWithoutUpgrade extends Emitter {\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri - uri or options\n   * @param {Object} opts - options\n   */\n  constructor(uri, opts) {\n    super();\n    this.binaryType = defaultBinaryType;\n    this.writeBuffer = [];\n    this._prevBufferLen = 0;\n    this._pingInterval = -1;\n    this._pingTimeout = -1;\n    this._maxPayload = -1;\n    /**\n     * The expiration timestamp of the {@link _pingTimeoutTimer} object is tracked, in case the timer is throttled and the\n     * callback is not fired on time. This can happen for example when a laptop is suspended or when a phone is locked.\n     */\n\n    this._pingTimeoutTime = Infinity;\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n\n    if (uri) {\n      const parsedUri = parse(uri);\n      opts.hostname = parsedUri.host;\n      opts.secure = parsedUri.protocol === \"https\" || parsedUri.protocol === \"wss\";\n      opts.port = parsedUri.port;\n      if (parsedUri.query) opts.query = parsedUri.query;\n    } else if (opts.host) {\n      opts.hostname = parse(opts.host).host;\n    }\n\n    installTimerFunctions(this, opts);\n    this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = this.secure ? \"443\" : \"80\";\n    }\n\n    this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : this.secure ? \"443\" : \"80\");\n    this.transports = [];\n    this._transportsByName = {};\n    opts.transports.forEach(t => {\n      const transportName = t.prototype.name;\n      this.transports.push(transportName);\n      this._transportsByName[transportName] = t;\n    });\n    this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      addTrailingSlash: true,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {},\n      closeOnBeforeunload: false\n    }, opts);\n    this.opts.path = this.opts.path.replace(/\\/$/, \"\") + (this.opts.addTrailingSlash ? \"/\" : \"\");\n\n    if (typeof this.opts.query === \"string\") {\n      this.opts.query = decode(this.opts.query);\n    }\n\n    if (withEventListeners) {\n      if (this.opts.closeOnBeforeunload) {\n        // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n        // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n        // closed/reloaded)\n        this._beforeunloadEventListener = () => {\n          if (this.transport) {\n            // silently close the transport\n            this.transport.removeAllListeners();\n            this.transport.close();\n          }\n        };\n\n        addEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n      }\n\n      if (this.hostname !== \"localhost\") {\n        this._offlineEventListener = () => {\n          this._onClose(\"transport close\", {\n            description: \"network connection lost\"\n          });\n        };\n\n        OFFLINE_EVENT_LISTENERS.push(this._offlineEventListener);\n      }\n    }\n\n    if (this.opts.withCredentials) {\n      this._cookieJar = createCookieJar();\n    }\n\n    this._open();\n  }\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} name - transport name\n   * @return {Transport}\n   * @private\n   */\n\n\n  createTransport(name) {\n    const query = Object.assign({}, this.opts.query); // append engine.io protocol identifier\n\n    query.EIO = protocol; // transport name\n\n    query.transport = name; // session id if we already have one\n\n    if (this.id) query.sid = this.id;\n    const opts = Object.assign({}, this.opts, {\n      query,\n      socket: this,\n      hostname: this.hostname,\n      secure: this.secure,\n      port: this.port\n    }, this.opts.transportOptions[name]);\n    return new this._transportsByName[name](opts);\n  }\n  /**\n   * Initializes transport to use and starts probe.\n   *\n   * @private\n   */\n\n\n  _open() {\n    if (this.transports.length === 0) {\n      // Emit error on next tick so it can be listened to\n      this.setTimeoutFn(() => {\n        this.emitReserved(\"error\", \"No transports available\");\n      }, 0);\n      return;\n    }\n\n    const transportName = this.opts.rememberUpgrade && SocketWithoutUpgrade.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1 ? \"websocket\" : this.transports[0];\n    this.readyState = \"opening\";\n    const transport = this.createTransport(transportName);\n    transport.open();\n    this.setTransport(transport);\n  }\n  /**\n   * Sets the current transport. Disables the existing one (if any).\n   *\n   * @private\n   */\n\n\n  setTransport(transport) {\n    if (this.transport) {\n      this.transport.removeAllListeners();\n    } // set up transport\n\n\n    this.transport = transport; // set up transport listeners\n\n    transport.on(\"drain\", this._onDrain.bind(this)).on(\"packet\", this._onPacket.bind(this)).on(\"error\", this._onError.bind(this)).on(\"close\", reason => this._onClose(\"transport close\", reason));\n  }\n  /**\n   * Called when connection is deemed open.\n   *\n   * @private\n   */\n\n\n  onOpen() {\n    this.readyState = \"open\";\n    SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n    this.emitReserved(\"open\");\n    this.flush();\n  }\n  /**\n   * Handles a packet.\n   *\n   * @private\n   */\n\n\n  _onPacket(packet) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      this.emitReserved(\"packet\", packet); // Socket is live - any packet counts\n\n      this.emitReserved(\"heartbeat\");\n\n      switch (packet.type) {\n        case \"open\":\n          this.onHandshake(JSON.parse(packet.data));\n          break;\n\n        case \"ping\":\n          this._sendPacket(\"pong\");\n\n          this.emitReserved(\"ping\");\n          this.emitReserved(\"pong\");\n\n          this._resetPingTimeout();\n\n          break;\n\n        case \"error\":\n          const err = new Error(\"server error\"); // @ts-ignore\n\n          err.code = packet.data;\n\n          this._onError(err);\n\n          break;\n\n        case \"message\":\n          this.emitReserved(\"data\", packet.data);\n          this.emitReserved(\"message\", packet.data);\n          break;\n      }\n    } else {}\n  }\n  /**\n   * Called upon handshake completion.\n   *\n   * @param {Object} data - handshake obj\n   * @private\n   */\n\n\n  onHandshake(data) {\n    this.emitReserved(\"handshake\", data);\n    this.id = data.sid;\n    this.transport.query.sid = data.sid;\n    this._pingInterval = data.pingInterval;\n    this._pingTimeout = data.pingTimeout;\n    this._maxPayload = data.maxPayload;\n    this.onOpen(); // In case open handler closes socket\n\n    if (\"closed\" === this.readyState) return;\n\n    this._resetPingTimeout();\n  }\n  /**\n   * Sets and resets ping timeout timer based on server pings.\n   *\n   * @private\n   */\n\n\n  _resetPingTimeout() {\n    this.clearTimeoutFn(this._pingTimeoutTimer);\n    const delay = this._pingInterval + this._pingTimeout;\n    this._pingTimeoutTime = Date.now() + delay;\n    this._pingTimeoutTimer = this.setTimeoutFn(() => {\n      this._onClose(\"ping timeout\");\n    }, delay);\n\n    if (this.opts.autoUnref) {\n      this._pingTimeoutTimer.unref();\n    }\n  }\n  /**\n   * Called on `drain` event\n   *\n   * @private\n   */\n\n\n  _onDrain() {\n    this.writeBuffer.splice(0, this._prevBufferLen); // setting prevBufferLen = 0 is very important\n    // for example, when upgrading, upgrade packet is sent over,\n    // and a nonzero prevBufferLen could cause problems on `drain`\n\n    this._prevBufferLen = 0;\n\n    if (0 === this.writeBuffer.length) {\n      this.emitReserved(\"drain\");\n    } else {\n      this.flush();\n    }\n  }\n  /**\n   * Flush write buffers.\n   *\n   * @private\n   */\n\n\n  flush() {\n    if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n      const packets = this._getWritablePackets();\n\n      this.transport.send(packets); // keep track of current length of writeBuffer\n      // splice writeBuffer and callbackBuffer on `drain`\n\n      this._prevBufferLen = packets.length;\n      this.emitReserved(\"flush\");\n    }\n  }\n  /**\n   * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n   * long-polling)\n   *\n   * @private\n   */\n\n\n  _getWritablePackets() {\n    const shouldCheckPayloadSize = this._maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1;\n\n    if (!shouldCheckPayloadSize) {\n      return this.writeBuffer;\n    }\n\n    let payloadSize = 1; // first packet type\n\n    for (let i = 0; i < this.writeBuffer.length; i++) {\n      const data = this.writeBuffer[i].data;\n\n      if (data) {\n        payloadSize += byteLength(data);\n      }\n\n      if (i > 0 && payloadSize > this._maxPayload) {\n        return this.writeBuffer.slice(0, i);\n      }\n\n      payloadSize += 2; // separator + packet type\n    }\n\n    return this.writeBuffer;\n  }\n  /**\n   * Checks whether the heartbeat timer has expired but the socket has not yet been notified.\n   *\n   * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the\n   * `write()` method then the message would not be buffered by the Socket.IO client.\n   *\n   * @return {boolean}\n   * @private\n   */\n\n  /* private */\n\n\n  _hasPingExpired() {\n    if (!this._pingTimeoutTime) return true;\n\n    const hasExpired = Date.now() > this._pingTimeoutTime;\n\n    if (hasExpired) {\n      this._pingTimeoutTime = 0;\n      nextTick(() => {\n        this._onClose(\"ping timeout\");\n      }, this.setTimeoutFn);\n    }\n\n    return hasExpired;\n  }\n  /**\n   * Sends a message.\n   *\n   * @param {String} msg - message.\n   * @param {Object} options.\n   * @param {Function} fn - callback function.\n   * @return {Socket} for chaining.\n   */\n\n\n  write(msg, options, fn) {\n    this._sendPacket(\"message\", msg, options, fn);\n\n    return this;\n  }\n  /**\n   * Sends a message. Alias of {@link Socket#write}.\n   *\n   * @param {String} msg - message.\n   * @param {Object} options.\n   * @param {Function} fn - callback function.\n   * @return {Socket} for chaining.\n   */\n\n\n  send(msg, options, fn) {\n    this._sendPacket(\"message\", msg, options, fn);\n\n    return this;\n  }\n  /**\n   * Sends a packet.\n   *\n   * @param {String} type: packet type.\n   * @param {String} data.\n   * @param {Object} options.\n   * @param {Function} fn - callback function.\n   * @private\n   */\n\n\n  _sendPacket(type, data, options, fn) {\n    if (\"function\" === typeof data) {\n      fn = data;\n      data = undefined;\n    }\n\n    if (\"function\" === typeof options) {\n      fn = options;\n      options = null;\n    }\n\n    if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n      return;\n    }\n\n    options = options || {};\n    options.compress = false !== options.compress;\n    const packet = {\n      type: type,\n      data: data,\n      options: options\n    };\n    this.emitReserved(\"packetCreate\", packet);\n    this.writeBuffer.push(packet);\n    if (fn) this.once(\"flush\", fn);\n    this.flush();\n  }\n  /**\n   * Closes the connection.\n   */\n\n\n  close() {\n    const close = () => {\n      this._onClose(\"forced close\");\n\n      this.transport.close();\n    };\n\n    const cleanupAndClose = () => {\n      this.off(\"upgrade\", cleanupAndClose);\n      this.off(\"upgradeError\", cleanupAndClose);\n      close();\n    };\n\n    const waitForUpgrade = () => {\n      // wait for upgrade to finish since we can't send packets while pausing a transport\n      this.once(\"upgrade\", cleanupAndClose);\n      this.once(\"upgradeError\", cleanupAndClose);\n    };\n\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.readyState = \"closing\";\n\n      if (this.writeBuffer.length) {\n        this.once(\"drain\", () => {\n          if (this.upgrading) {\n            waitForUpgrade();\n          } else {\n            close();\n          }\n        });\n      } else if (this.upgrading) {\n        waitForUpgrade();\n      } else {\n        close();\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Called upon transport error\n   *\n   * @private\n   */\n\n\n  _onError(err) {\n    SocketWithoutUpgrade.priorWebsocketSuccess = false;\n\n    if (this.opts.tryAllTransports && this.transports.length > 1 && this.readyState === \"opening\") {\n      this.transports.shift();\n      return this._open();\n    }\n\n    this.emitReserved(\"error\", err);\n\n    this._onClose(\"transport error\", err);\n  }\n  /**\n   * Called upon transport close.\n   *\n   * @private\n   */\n\n\n  _onClose(reason, description) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      // clear timers\n      this.clearTimeoutFn(this._pingTimeoutTimer); // stop event from firing again for transport\n\n      this.transport.removeAllListeners(\"close\"); // ensure transport won't stay open\n\n      this.transport.close(); // ignore further transport communication\n\n      this.transport.removeAllListeners();\n\n      if (withEventListeners) {\n        if (this._beforeunloadEventListener) {\n          removeEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n        }\n\n        if (this._offlineEventListener) {\n          const i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);\n\n          if (i !== -1) {\n            OFFLINE_EVENT_LISTENERS.splice(i, 1);\n          }\n        }\n      } // set ready state\n\n\n      this.readyState = \"closed\"; // clear session id\n\n      this.id = null; // emit close event\n\n      this.emitReserved(\"close\", reason, description); // clean buffers after, so users can still\n      // grab the buffers on `close` event\n\n      this.writeBuffer = [];\n      this._prevBufferLen = 0;\n    }\n  }\n\n}\nSocketWithoutUpgrade.protocol = protocol;\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see Socket\n */\n\nexport class SocketWithUpgrade extends SocketWithoutUpgrade {\n  constructor() {\n    super(...arguments);\n    this._upgrades = [];\n  }\n\n  onOpen() {\n    super.onOpen();\n\n    if (\"open\" === this.readyState && this.opts.upgrade) {\n      for (let i = 0; i < this._upgrades.length; i++) {\n        this._probe(this._upgrades[i]);\n      }\n    }\n  }\n  /**\n   * Probes a transport.\n   *\n   * @param {String} name - transport name\n   * @private\n   */\n\n\n  _probe(name) {\n    let transport = this.createTransport(name);\n    let failed = false;\n    SocketWithoutUpgrade.priorWebsocketSuccess = false;\n\n    const onTransportOpen = () => {\n      if (failed) return;\n      transport.send([{\n        type: \"ping\",\n        data: \"probe\"\n      }]);\n      transport.once(\"packet\", msg => {\n        if (failed) return;\n\n        if (\"pong\" === msg.type && \"probe\" === msg.data) {\n          this.upgrading = true;\n          this.emitReserved(\"upgrading\", transport);\n          if (!transport) return;\n          SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === transport.name;\n          this.transport.pause(() => {\n            if (failed) return;\n            if (\"closed\" === this.readyState) return;\n            cleanup();\n            this.setTransport(transport);\n            transport.send([{\n              type: \"upgrade\"\n            }]);\n            this.emitReserved(\"upgrade\", transport);\n            transport = null;\n            this.upgrading = false;\n            this.flush();\n          });\n        } else {\n          const err = new Error(\"probe error\"); // @ts-ignore\n\n          err.transport = transport.name;\n          this.emitReserved(\"upgradeError\", err);\n        }\n      });\n    };\n\n    function freezeTransport() {\n      if (failed) return; // Any callback called by transport should be ignored since now\n\n      failed = true;\n      cleanup();\n      transport.close();\n      transport = null;\n    } // Handle any error that happens while probing\n\n\n    const onerror = err => {\n      const error = new Error(\"probe error: \" + err); // @ts-ignore\n\n      error.transport = transport.name;\n      freezeTransport();\n      this.emitReserved(\"upgradeError\", error);\n    };\n\n    function onTransportClose() {\n      onerror(\"transport closed\");\n    } // When the socket is closed while we're probing\n\n\n    function onclose() {\n      onerror(\"socket closed\");\n    } // When the socket is upgraded while we're probing\n\n\n    function onupgrade(to) {\n      if (transport && to.name !== transport.name) {\n        freezeTransport();\n      }\n    } // Remove all listeners on the transport and on self\n\n\n    const cleanup = () => {\n      transport.removeListener(\"open\", onTransportOpen);\n      transport.removeListener(\"error\", onerror);\n      transport.removeListener(\"close\", onTransportClose);\n      this.off(\"close\", onclose);\n      this.off(\"upgrading\", onupgrade);\n    };\n\n    transport.once(\"open\", onTransportOpen);\n    transport.once(\"error\", onerror);\n    transport.once(\"close\", onTransportClose);\n    this.once(\"close\", onclose);\n    this.once(\"upgrading\", onupgrade);\n\n    if (this._upgrades.indexOf(\"webtransport\") !== -1 && name !== \"webtransport\") {\n      // favor WebTransport\n      this.setTimeoutFn(() => {\n        if (!failed) {\n          transport.open();\n        }\n      }, 200);\n    } else {\n      transport.open();\n    }\n  }\n\n  onHandshake(data) {\n    this._upgrades = this._filterUpgrades(data.upgrades);\n    super.onHandshake(data);\n  }\n  /**\n   * Filters upgrades, returning only those matching client transports.\n   *\n   * @param {Array} upgrades - server upgrades\n   * @private\n   */\n\n\n  _filterUpgrades(upgrades) {\n    const filteredUpgrades = [];\n\n    for (let i = 0; i < upgrades.length; i++) {\n      if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n    }\n\n    return filteredUpgrades;\n  }\n\n}\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * @example\n * import { Socket } from \"engine.io-client\";\n *\n * const socket = new Socket();\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see SocketWithUpgrade\n */\n\nexport class Socket extends SocketWithUpgrade {\n  constructor(uri) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const o = typeof uri === \"object\" ? uri : opts;\n\n    if (!o.transports || o.transports && typeof o.transports[0] === \"string\") {\n      o.transports = (o.transports || [\"polling\", \"websocket\", \"webtransport\"]).map(transportName => DEFAULT_TRANSPORTS[transportName]).filter(t => !!t);\n    }\n\n    super(uri, o);\n  }\n\n}","map":{"version":3,"sources":["c:/2025/20250425-simple-react-socket-io/simple-react-socket-io-main/react-client/node_modules/engine.io-client/build/esm/socket.js"],"names":["transports","DEFAULT_TRANSPORTS","installTimerFunctions","byteLength","decode","parse","Emitter","protocol","createCookieJar","defaultBinaryType","nextTick","withEventListeners","addEventListener","removeEventListener","OFFLINE_EVENT_LISTENERS","forEach","listener","SocketWithoutUpgrade","constructor","uri","opts","binaryType","writeBuffer","_prevBufferLen","_pingInterval","_pingTimeout","_maxPayload","_pingTimeoutTime","Infinity","parsedUri","hostname","host","secure","port","query","location","_transportsByName","t","transportName","prototype","name","push","Object","assign","path","agent","withCredentials","upgrade","timestampParam","rememberUpgrade","addTrailingSlash","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","closeOnBeforeunload","replace","_beforeunloadEventListener","transport","removeAllListeners","close","_offlineEventListener","_onClose","description","_cookieJar","_open","createTransport","EIO","id","sid","socket","length","setTimeoutFn","emitReserved","priorWebsocketSuccess","indexOf","readyState","open","setTransport","on","_onDrain","bind","_onPacket","_onError","reason","onOpen","flush","packet","type","onHandshake","JSON","data","_sendPacket","_resetPingTimeout","err","Error","code","pingInterval","pingTimeout","maxPayload","clearTimeoutFn","_pingTimeoutTimer","delay","Date","now","autoUnref","unref","splice","writable","upgrading","packets","_getWritablePackets","send","shouldCheckPayloadSize","payloadSize","i","slice","_hasPingExpired","hasExpired","write","msg","options","fn","undefined","compress","once","cleanupAndClose","off","waitForUpgrade","tryAllTransports","shift","SocketWithUpgrade","arguments","_upgrades","_probe","failed","onTransportOpen","pause","cleanup","freezeTransport","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","_filterUpgrades","upgrades","filteredUpgrades","Socket","o","map","filter"],"mappings":"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","sourcesContent":["import { transports as DEFAULT_TRANSPORTS } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nimport { createCookieJar, defaultBinaryType, nextTick, } from \"./globals.node.js\";\nconst withEventListeners = typeof addEventListener === \"function\" &&\n    typeof removeEventListener === \"function\";\nconst OFFLINE_EVENT_LISTENERS = [];\nif (withEventListeners) {\n    // within a ServiceWorker, any event handler for the 'offline' event must be added on the initial evaluation of the\n    // script, so we create one single event listener here which will forward the event to the socket instances\n    addEventListener(\"offline\", () => {\n        OFFLINE_EVENT_LISTENERS.forEach((listener) => listener());\n    }, false);\n}\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes without upgrade mechanism, which means that it will keep the first low-level transport that\n * successfully establishes the connection.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithoutUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithoutUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithUpgrade\n * @see Socket\n */\nexport class SocketWithoutUpgrade extends Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri - uri or options\n     * @param {Object} opts - options\n     */\n    constructor(uri, opts) {\n        super();\n        this.binaryType = defaultBinaryType;\n        this.writeBuffer = [];\n        this._prevBufferLen = 0;\n        this._pingInterval = -1;\n        this._pingTimeout = -1;\n        this._maxPayload = -1;\n        /**\n         * The expiration timestamp of the {@link _pingTimeoutTimer} object is tracked, in case the timer is throttled and the\n         * callback is not fired on time. This can happen for example when a laptop is suspended or when a phone is locked.\n         */\n        this._pingTimeoutTime = Infinity;\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            const parsedUri = parse(uri);\n            opts.hostname = parsedUri.host;\n            opts.secure =\n                parsedUri.protocol === \"https\" || parsedUri.protocol === \"wss\";\n            opts.port = parsedUri.port;\n            if (parsedUri.query)\n                opts.query = parsedUri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = parse(opts.host).host;\n        }\n        installTimerFunctions(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = [];\n        this._transportsByName = {};\n        opts.transports.forEach((t) => {\n            const transportName = t.prototype.name;\n            this.transports.push(transportName);\n            this._transportsByName[transportName] = t;\n        });\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            addTrailingSlash: true,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024,\n            },\n            transportOptions: {},\n            closeOnBeforeunload: false,\n        }, opts);\n        this.opts.path =\n            this.opts.path.replace(/\\/$/, \"\") +\n                (this.opts.addTrailingSlash ? \"/\" : \"\");\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = decode(this.opts.query);\n        }\n        if (withEventListeners) {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                this._beforeunloadEventListener = () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                };\n                addEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                this._offlineEventListener = () => {\n                    this._onClose(\"transport close\", {\n                        description: \"network connection lost\",\n                    });\n                };\n                OFFLINE_EVENT_LISTENERS.push(this._offlineEventListener);\n            }\n        }\n        if (this.opts.withCredentials) {\n            this._cookieJar = createCookieJar();\n        }\n        this._open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} name - transport name\n     * @return {Transport}\n     * @private\n     */\n    createTransport(name) {\n        const query = Object.assign({}, this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port,\n        }, this.opts.transportOptions[name]);\n        return new this._transportsByName[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */\n    _open() {\n        if (this.transports.length === 0) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        const transportName = this.opts.rememberUpgrade &&\n            SocketWithoutUpgrade.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1\n            ? \"websocket\"\n            : this.transports[0];\n        this.readyState = \"opening\";\n        const transport = this.createTransport(transportName);\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */\n    setTransport(transport) {\n        if (this.transport) {\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this._onDrain.bind(this))\n            .on(\"packet\", this._onPacket.bind(this))\n            .on(\"error\", this._onError.bind(this))\n            .on(\"close\", (reason) => this._onClose(\"transport close\", reason));\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        SocketWithoutUpgrade.priorWebsocketSuccess =\n            \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */\n    _onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this._sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    this._resetPingTimeout();\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this._onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this._pingInterval = data.pingInterval;\n        this._pingTimeout = data.pingTimeout;\n        this._maxPayload = data.maxPayload;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this._resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */\n    _resetPingTimeout() {\n        this.clearTimeoutFn(this._pingTimeoutTimer);\n        const delay = this._pingInterval + this._pingTimeout;\n        this._pingTimeoutTime = Date.now() + delay;\n        this._pingTimeoutTimer = this.setTimeoutFn(() => {\n            this._onClose(\"ping timeout\");\n        }, delay);\n        if (this.opts.autoUnref) {\n            this._pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */\n    _onDrain() {\n        this.writeBuffer.splice(0, this._prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this._prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            const packets = this._getWritablePackets();\n            this.transport.send(packets);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this._prevBufferLen = packets.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    _getWritablePackets() {\n        const shouldCheckPayloadSize = this._maxPayload &&\n            this.transport.name === \"polling\" &&\n            this.writeBuffer.length > 1;\n        if (!shouldCheckPayloadSize) {\n            return this.writeBuffer;\n        }\n        let payloadSize = 1; // first packet type\n        for (let i = 0; i < this.writeBuffer.length; i++) {\n            const data = this.writeBuffer[i].data;\n            if (data) {\n                payloadSize += byteLength(data);\n            }\n            if (i > 0 && payloadSize > this._maxPayload) {\n                return this.writeBuffer.slice(0, i);\n            }\n            payloadSize += 2; // separator + packet type\n        }\n        return this.writeBuffer;\n    }\n    /**\n     * Checks whether the heartbeat timer has expired but the socket has not yet been notified.\n     *\n     * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the\n     * `write()` method then the message would not be buffered by the Socket.IO client.\n     *\n     * @return {boolean}\n     * @private\n     */\n    /* private */ _hasPingExpired() {\n        if (!this._pingTimeoutTime)\n            return true;\n        const hasExpired = Date.now() > this._pingTimeoutTime;\n        if (hasExpired) {\n            this._pingTimeoutTime = 0;\n            nextTick(() => {\n                this._onClose(\"ping timeout\");\n            }, this.setTimeoutFn);\n        }\n        return hasExpired;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    write(msg, options, fn) {\n        this._sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a message. Alias of {@link Socket#write}.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    send(msg, options, fn) {\n        this._sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */\n    _sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options,\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     */\n    close() {\n        const close = () => {\n            this._onClose(\"forced close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */\n    _onError(err) {\n        SocketWithoutUpgrade.priorWebsocketSuccess = false;\n        if (this.opts.tryAllTransports &&\n            this.transports.length > 1 &&\n            this.readyState === \"opening\") {\n            this.transports.shift();\n            return this._open();\n        }\n        this.emitReserved(\"error\", err);\n        this._onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */\n    _onClose(reason, description) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            // clear timers\n            this.clearTimeoutFn(this._pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (withEventListeners) {\n                if (this._beforeunloadEventListener) {\n                    removeEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n                }\n                if (this._offlineEventListener) {\n                    const i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);\n                    if (i !== -1) {\n                        OFFLINE_EVENT_LISTENERS.splice(i, 1);\n                    }\n                }\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, description);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this._prevBufferLen = 0;\n        }\n    }\n}\nSocketWithoutUpgrade.protocol = protocol;\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see Socket\n */\nexport class SocketWithUpgrade extends SocketWithoutUpgrade {\n    constructor() {\n        super(...arguments);\n        this._upgrades = [];\n    }\n    onOpen() {\n        super.onOpen();\n        if (\"open\" === this.readyState && this.opts.upgrade) {\n            for (let i = 0; i < this._upgrades.length; i++) {\n                this._probe(this._upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */\n    _probe(name) {\n        let transport = this.createTransport(name);\n        let failed = false;\n        SocketWithoutUpgrade.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", (msg) => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    SocketWithoutUpgrade.priorWebsocketSuccess =\n                        \"websocket\" === transport.name;\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = (err) => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        if (this._upgrades.indexOf(\"webtransport\") !== -1 &&\n            name !== \"webtransport\") {\n            // favor WebTransport\n            this.setTimeoutFn(() => {\n                if (!failed) {\n                    transport.open();\n                }\n            }, 200);\n        }\n        else {\n            transport.open();\n        }\n    }\n    onHandshake(data) {\n        this._upgrades = this._filterUpgrades(data.upgrades);\n        super.onHandshake(data);\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */\n    _filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        for (let i = 0; i < upgrades.length; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * @example\n * import { Socket } from \"engine.io-client\";\n *\n * const socket = new Socket();\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see SocketWithUpgrade\n */\nexport class Socket extends SocketWithUpgrade {\n    constructor(uri, opts = {}) {\n        const o = typeof uri === \"object\" ? uri : opts;\n        if (!o.transports ||\n            (o.transports && typeof o.transports[0] === \"string\")) {\n            o.transports = (o.transports || [\"polling\", \"websocket\", \"webtransport\"])\n                .map((transportName) => DEFAULT_TRANSPORTS[transportName])\n                .filter((t) => !!t);\n        }\n        super(uri, o);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}