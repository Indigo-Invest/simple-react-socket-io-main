{"ast":null,"code":"import { Polling } from \"./polling.js\";\n/**\n * HTTP long-polling based on the built-in `fetch()` method.\n *\n * Usage: browser, Node.js (since v18), Deno, Bun\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/fetch\n * @see https://caniuse.com/fetch\n * @see https://nodejs.org/api/globals.html#fetch\n */\n\nexport class Fetch extends Polling {\n  doPoll() {\n    this._fetch().then(res => {\n      if (!res.ok) {\n        return this.onError(\"fetch read error\", res.status, res);\n      }\n\n      res.text().then(data => this.onData(data));\n    }).catch(err => {\n      this.onError(\"fetch read error\", err);\n    });\n  }\n\n  doWrite(data, callback) {\n    this._fetch(data).then(res => {\n      if (!res.ok) {\n        return this.onError(\"fetch write error\", res.status, res);\n      }\n\n      callback();\n    }).catch(err => {\n      this.onError(\"fetch write error\", err);\n    });\n  }\n\n  _fetch(data) {\n    var _a;\n\n    const isPost = data !== undefined;\n    const headers = new Headers(this.opts.extraHeaders);\n\n    if (isPost) {\n      headers.set(\"content-type\", \"text/plain;charset=UTF-8\");\n    }\n\n    (_a = this.socket._cookieJar) === null || _a === void 0 ? void 0 : _a.appendCookies(headers);\n    return fetch(this.uri(), {\n      method: isPost ? \"POST\" : \"GET\",\n      body: isPost ? data : null,\n      headers,\n      credentials: this.opts.withCredentials ? \"include\" : \"omit\"\n    }).then(res => {\n      var _a; // @ts-ignore getSetCookie() was added in Node.js v19.7.0\n\n\n      (_a = this.socket._cookieJar) === null || _a === void 0 ? void 0 : _a.parseCookies(res.headers.getSetCookie());\n      return res;\n    });\n  }\n\n}","map":{"version":3,"sources":["c:/2025/20250425-simple-react-socket-io/simple-react-socket-io-main/react-client/node_modules/engine.io-client/build/esm/transports/polling-fetch.js"],"names":["Polling","Fetch","doPoll","_fetch","then","res","ok","onError","status","text","data","onData","catch","err","doWrite","callback","_a","isPost","undefined","headers","Headers","opts","extraHeaders","set","socket","_cookieJar","appendCookies","fetch","uri","method","body","credentials","withCredentials","parseCookies","getSetCookie"],"mappings":"AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,KAAN,SAAoBD,OAApB,CAA4B;AAC/BE,EAAAA,MAAM,GAAG;AACL,SAAKC,MAAL,GACKC,IADL,CACWC,GAAD,IAAS;AACf,UAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,eAAO,KAAKC,OAAL,CAAa,kBAAb,EAAiCF,GAAG,CAACG,MAArC,EAA6CH,GAA7C,CAAP;AACH;;AACDA,MAAAA,GAAG,CAACI,IAAJ,GAAWL,IAAX,CAAiBM,IAAD,IAAU,KAAKC,MAAL,CAAYD,IAAZ,CAA1B;AACH,KAND,EAOKE,KAPL,CAOYC,GAAD,IAAS;AAChB,WAAKN,OAAL,CAAa,kBAAb,EAAiCM,GAAjC;AACH,KATD;AAUH;;AACDC,EAAAA,OAAO,CAACJ,IAAD,EAAOK,QAAP,EAAiB;AACpB,SAAKZ,MAAL,CAAYO,IAAZ,EACKN,IADL,CACWC,GAAD,IAAS;AACf,UAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,eAAO,KAAKC,OAAL,CAAa,mBAAb,EAAkCF,GAAG,CAACG,MAAtC,EAA8CH,GAA9C,CAAP;AACH;;AACDU,MAAAA,QAAQ;AACX,KAND,EAOKH,KAPL,CAOYC,GAAD,IAAS;AAChB,WAAKN,OAAL,CAAa,mBAAb,EAAkCM,GAAlC;AACH,KATD;AAUH;;AACDV,EAAAA,MAAM,CAACO,IAAD,EAAO;AACT,QAAIM,EAAJ;;AACA,UAAMC,MAAM,GAAGP,IAAI,KAAKQ,SAAxB;AACA,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,KAAKC,IAAL,CAAUC,YAAtB,CAAhB;;AACA,QAAIL,MAAJ,EAAY;AACRE,MAAAA,OAAO,CAACI,GAAR,CAAY,cAAZ,EAA4B,0BAA5B;AACH;;AACD,KAACP,EAAE,GAAG,KAAKQ,MAAL,CAAYC,UAAlB,MAAkC,IAAlC,IAA0CT,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAACU,aAAH,CAAiBP,OAAjB,CAAnE;AACA,WAAOQ,KAAK,CAAC,KAAKC,GAAL,EAAD,EAAa;AACrBC,MAAAA,MAAM,EAAEZ,MAAM,GAAG,MAAH,GAAY,KADL;AAErBa,MAAAA,IAAI,EAAEb,MAAM,GAAGP,IAAH,GAAU,IAFD;AAGrBS,MAAAA,OAHqB;AAIrBY,MAAAA,WAAW,EAAE,KAAKV,IAAL,CAAUW,eAAV,GAA4B,SAA5B,GAAwC;AAJhC,KAAb,CAAL,CAKJ5B,IALI,CAKEC,GAAD,IAAS;AACb,UAAIW,EAAJ,CADa,CAEb;;;AACA,OAACA,EAAE,GAAG,KAAKQ,MAAL,CAAYC,UAAlB,MAAkC,IAAlC,IAA0CT,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAACiB,YAAH,CAAgB5B,GAAG,CAACc,OAAJ,CAAYe,YAAZ,EAAhB,CAAnE;AACA,aAAO7B,GAAP;AACH,KAVM,CAAP;AAWH;;AA5C8B","sourcesContent":["import { Polling } from \"./polling.js\";\n/**\n * HTTP long-polling based on the built-in `fetch()` method.\n *\n * Usage: browser, Node.js (since v18), Deno, Bun\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/fetch\n * @see https://caniuse.com/fetch\n * @see https://nodejs.org/api/globals.html#fetch\n */\nexport class Fetch extends Polling {\n    doPoll() {\n        this._fetch()\n            .then((res) => {\n            if (!res.ok) {\n                return this.onError(\"fetch read error\", res.status, res);\n            }\n            res.text().then((data) => this.onData(data));\n        })\n            .catch((err) => {\n            this.onError(\"fetch read error\", err);\n        });\n    }\n    doWrite(data, callback) {\n        this._fetch(data)\n            .then((res) => {\n            if (!res.ok) {\n                return this.onError(\"fetch write error\", res.status, res);\n            }\n            callback();\n        })\n            .catch((err) => {\n            this.onError(\"fetch write error\", err);\n        });\n    }\n    _fetch(data) {\n        var _a;\n        const isPost = data !== undefined;\n        const headers = new Headers(this.opts.extraHeaders);\n        if (isPost) {\n            headers.set(\"content-type\", \"text/plain;charset=UTF-8\");\n        }\n        (_a = this.socket._cookieJar) === null || _a === void 0 ? void 0 : _a.appendCookies(headers);\n        return fetch(this.uri(), {\n            method: isPost ? \"POST\" : \"GET\",\n            body: isPost ? data : null,\n            headers,\n            credentials: this.opts.withCredentials ? \"include\" : \"omit\",\n        }).then((res) => {\n            var _a;\n            // @ts-ignore getSetCookie() was added in Node.js v19.7.0\n            (_a = this.socket._cookieJar) === null || _a === void 0 ? void 0 : _a.parseCookies(res.headers.getSetCookie());\n            return res;\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}