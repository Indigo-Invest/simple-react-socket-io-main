{"ast":null,"code":"import { Transport } from \"../transport.js\";\nimport { nextTick } from \"../globals.node.js\";\nimport { createPacketDecoderStream, createPacketEncoderStream } from \"engine.io-parser\";\n/**\n * WebTransport transport based on the built-in `WebTransport` object.\n *\n * Usage: browser, Node.js (with the `@fails-components/webtransport` package)\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebTransport\n * @see https://caniuse.com/webtransport\n */\n\nexport class WT extends Transport {\n  get name() {\n    return \"webtransport\";\n  }\n\n  doOpen() {\n    try {\n      // @ts-ignore\n      this._transport = new WebTransport(this.createUri(\"https\"), this.opts.transportOptions[this.name]);\n    } catch (err) {\n      return this.emitReserved(\"error\", err);\n    }\n\n    this._transport.closed.then(() => {\n      this.onClose();\n    }).catch(err => {\n      this.onError(\"webtransport error\", err);\n    }); // note: we could have used async/await, but that would require some additional polyfills\n\n\n    this._transport.ready.then(() => {\n      this._transport.createBidirectionalStream().then(stream => {\n        const decoderStream = createPacketDecoderStream(Number.MAX_SAFE_INTEGER, this.socket.binaryType);\n        const reader = stream.readable.pipeThrough(decoderStream).getReader();\n        const encoderStream = createPacketEncoderStream();\n        encoderStream.readable.pipeTo(stream.writable);\n        this._writer = encoderStream.writable.getWriter();\n\n        const read = () => {\n          reader.read().then(_ref => {\n            let {\n              done,\n              value\n            } = _ref;\n\n            if (done) {\n              return;\n            }\n\n            this.onPacket(value);\n            read();\n          }).catch(err => {});\n        };\n\n        read();\n        const packet = {\n          type: \"open\"\n        };\n\n        if (this.query.sid) {\n          packet.data = `{\"sid\":\"${this.query.sid}\"}`;\n        }\n\n        this._writer.write(packet).then(() => this.onOpen());\n      });\n    });\n  }\n\n  write(packets) {\n    this.writable = false;\n\n    for (let i = 0; i < packets.length; i++) {\n      const packet = packets[i];\n      const lastPacket = i === packets.length - 1;\n\n      this._writer.write(packet).then(() => {\n        if (lastPacket) {\n          nextTick(() => {\n            this.writable = true;\n            this.emitReserved(\"drain\");\n          }, this.setTimeoutFn);\n        }\n      });\n    }\n  }\n\n  doClose() {\n    var _a;\n\n    (_a = this._transport) === null || _a === void 0 ? void 0 : _a.close();\n  }\n\n}","map":{"version":3,"sources":["c:/2025/20250425-simple-react-socket-io/simple-react-socket-io-main/react-client/node_modules/engine.io-client/build/esm/transports/webtransport.js"],"names":["Transport","nextTick","createPacketDecoderStream","createPacketEncoderStream","WT","name","doOpen","_transport","WebTransport","createUri","opts","transportOptions","err","emitReserved","closed","then","onClose","catch","onError","ready","createBidirectionalStream","stream","decoderStream","Number","MAX_SAFE_INTEGER","socket","binaryType","reader","readable","pipeThrough","getReader","encoderStream","pipeTo","writable","_writer","getWriter","read","done","value","onPacket","packet","type","query","sid","data","write","onOpen","packets","i","length","lastPacket","setTimeoutFn","doClose","_a","close"],"mappings":"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","sourcesContent":["import { Transport } from \"../transport.js\";\nimport { nextTick } from \"../globals.node.js\";\nimport { createPacketDecoderStream, createPacketEncoderStream, } from \"engine.io-parser\";\n/**\n * WebTransport transport based on the built-in `WebTransport` object.\n *\n * Usage: browser, Node.js (with the `@fails-components/webtransport` package)\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WebTransport\n * @see https://caniuse.com/webtransport\n */\nexport class WT extends Transport {\n    get name() {\n        return \"webtransport\";\n    }\n    doOpen() {\n        try {\n            // @ts-ignore\n            this._transport = new WebTransport(this.createUri(\"https\"), this.opts.transportOptions[this.name]);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this._transport.closed\n            .then(() => {\n            this.onClose();\n        })\n            .catch((err) => {\n            this.onError(\"webtransport error\", err);\n        });\n        // note: we could have used async/await, but that would require some additional polyfills\n        this._transport.ready.then(() => {\n            this._transport.createBidirectionalStream().then((stream) => {\n                const decoderStream = createPacketDecoderStream(Number.MAX_SAFE_INTEGER, this.socket.binaryType);\n                const reader = stream.readable.pipeThrough(decoderStream).getReader();\n                const encoderStream = createPacketEncoderStream();\n                encoderStream.readable.pipeTo(stream.writable);\n                this._writer = encoderStream.writable.getWriter();\n                const read = () => {\n                    reader\n                        .read()\n                        .then(({ done, value }) => {\n                        if (done) {\n                            return;\n                        }\n                        this.onPacket(value);\n                        read();\n                    })\n                        .catch((err) => {\n                    });\n                };\n                read();\n                const packet = { type: \"open\" };\n                if (this.query.sid) {\n                    packet.data = `{\"sid\":\"${this.query.sid}\"}`;\n                }\n                this._writer.write(packet).then(() => this.onOpen());\n            });\n        });\n    }\n    write(packets) {\n        this.writable = false;\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            this._writer.write(packet).then(() => {\n                if (lastPacket) {\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    doClose() {\n        var _a;\n        (_a = this._transport) === null || _a === void 0 ? void 0 : _a.close();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}